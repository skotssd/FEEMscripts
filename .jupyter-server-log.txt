[I 17:22:11.544 NotebookApp] Writing notebook server cookie secret to /home/jovyan/.local/share/jupyter/runtime/notebook_cookie_secret
[I 17:22:11.545 NotebookApp] Authentication of /metrics is OFF, since other authentication is disabled.
[W 17:22:12.018 NotebookApp] All authentication is disabled.  Anyone who can connect to this server will be able to run code.
[W 2023-08-24 17:22:12.989 LabApp] 'ip' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-08-24 17:22:12.989 LabApp] 'token' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-08-24 17:22:12.989 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-08-24 17:22:12.989 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[I 2023-08-24 17:22:13.003 LabApp] JupyterLab extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/jupyterlab
[I 2023-08-24 17:22:13.003 LabApp] JupyterLab application directory is /srv/conda/envs/notebook/share/jupyter/lab
[I 17:22:13.015 NotebookApp] nteract extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/nteract_on_jupyter
[I 17:22:13.018 NotebookApp] Serving notebooks from local directory: /home/jovyan
[I 17:22:13.018 NotebookApp] Jupyter Notebook 6.4.12 is running at:
[I 17:22:13.018 NotebookApp] http://224710f94f77:8888/
[I 17:22:13.018 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[W 17:22:13.033 NotebookApp] No web browser found: could not locate runnable browser.
[W 17:30:58.868 NotebookApp] Collisions detected in /home/jovyan/.jupyter/jupyter_notebook_config.py and /home/jovyan/.jupyter/jupyter_notebook_config.json config files. /home/jovyan/.jupyter/jupyter_notebook_config.json has higher priority: {
      "NotebookApp": {
        "password": "'' ignored, using 'argon2:$argon2id$v=19$m=10240,t=10,p=8$/fSiCL0Y4BAZ64DFpjk8rw$qz6cDFvDzhPi3tcrOMpbg6WuwJes1K+WEcmhYQpyTPk'"
      }
    }
[W 2023-08-24 17:31:00.250 LabApp] 'ip' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-08-24 17:31:00.251 LabApp] 'token' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-08-24 17:31:00.251 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[W 2023-08-24 17:31:00.251 LabApp] 'password' has moved from NotebookApp to ServerApp. This config will be passed to ServerApp. Be sure to update your config before our next release.
[I 2023-08-24 17:31:00.265 LabApp] JupyterLab extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/jupyterlab
[I 2023-08-24 17:31:00.265 LabApp] JupyterLab application directory is /srv/conda/envs/notebook/share/jupyter/lab
[I 17:31:00.275 NotebookApp] nteract extension loaded from /srv/conda/envs/notebook/lib/python3.7/site-packages/nteract_on_jupyter
[I 17:31:00.277 NotebookApp] Serving notebooks from local directory: /home/jovyan
[I 17:31:00.277 NotebookApp] Jupyter Notebook 6.4.12 is running at:
[I 17:31:00.277 NotebookApp] http://224710f94f77:8888/
[I 17:31:00.278 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[W 17:31:00.291 NotebookApp] No web browser found: could not locate runnable browser.
[I 17:32:29.182 NotebookApp] 302 GET / (172.25.0.1) 1.150000ms
[I 17:32:29.187 NotebookApp] 302 GET /tree? (172.25.0.1) 1.260000ms
[W 17:32:42.985 NotebookApp] 401 POST /login?next=%2Ftree%3F (172.25.0.1) 153.900000ms referer=https://jupyter7.clearnasdss.synology.me/login?next=%2Ftree%3F
[I 17:32:47.352 NotebookApp] 302 POST /login?next=%2Ftree%3F (172.25.0.1) 178.130000ms
[I 17:32:58.756 NotebookApp] 301 GET /static/favicons/favicon.ico (172.25.0.1) 16.630000ms
[I 2023-08-24 17:33:02.369 LabApp] Build is up to date
[I 17:33:08.131 NotebookApp] Writing notebook-signing key to /home/jovyan/.local/share/jupyter/notebook_secret
[W 17:33:08.132 NotebookApp] Notebook Meilleur_HudsonBay.ipynb is not trusted
[I 17:33:08.394 NotebookApp] Kernel started: b3d4517a-1a32-414b-a4a4-eb8c77c37221, name: xoctave
Serving notebooks from local directory: /home/jovyan
1 active kernel
Jupyter Notebook 6.4.12 is running at:
http://224710f94f77:8888/
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
[I 17:33:09.283 NotebookApp] 301 GET /static/favicons/favicon-busy-1.ico (172.25.0.1) 6.150000ms
[W 17:33:09.302 NotebookApp] Got events for closed stream <zmq.eventloop.zmqstream.ZMQStream object at 0x7f0700b96d90>
Executing: % model paste from openfluor website

ID='ID15154';

exmodel=[...
250	0.218176585	0.168302759	0.585327196	0.183079511	0.180093286
255	0.231006466	0.199130969	0.483234213	0.169057867	0.204822633
260	0.231269972	0.225323908	0.398721904	0.150429951	0.247579292
265	0.221471462	0.238006404	0.328322577	0.132661549	0.301068054
270	0.207501859	0.241636881	0.26397234	0.130751018	0.355649133
275	0.195198804	0.237377045	0.205108476	0.148101944	0.395619243
280	0.189501356	0.22875504	0.148165351	0.179775853	0.413609417
285	0.190952362	0.220150928	0.095650848	0.22654832	0.375459466
290	0.195347115	0.208984374	0.060255301	0.267829805	0.317011648
295	0.19819746	0.197235017	0.042917039	0.30340138	0.215727092
300	0.201568224	0.183043908	0.038463677	0.316008892	0.142879815
305	0.20574408	0.171749455	0.035417305	0.316565851	0.101994953
310	0.212501186	0.167343363	0.022399959	0.314998153	0.017433192
315	0.212188147	0.160518784	0.020630357	0.291892532	0.004236505
320	0.210232293	0.155217724	0.022266581	0.261466475	0
325	0.207846669	0.151800946	0.024329154	0.228925297	0
330	0.203162192	0.149521071	0.027891461	0.199796593	0
335	0.199321459	0.148093505	0.025896652	0.166984954	0
340	0.19346276	0.146828263	0.029160553	0.133450898	0
345	0.186342926	0.147145343	0.024526006	0.104777561	0
350	0.176749079	0.147237909	0.01938387	0.076438083	0
355	0.165223317	0.147241976	0.017588371	0.04816192	0.015027512
360	0.154750077	0.149730044	0.014676739	0.029178795	0.010410052
365	0.141454196	0.152138819	0.012698236	0.013159567	0.008334752
370	0.127551312	0.153164608	0.008080632	0.002810242	0.006297771
375	0.111076828	0.151548331	0	0	0.003587693
380	0.090721119	0.144545961	0	0	0.001011496
385	0.072571562	0.137361525	0	0	0.000541948
390	0.057035737	0.128974401	0	0	0.000521971
395	0.04355956	0.120152589	0	0	0.000681332
400	0.033066638	0.110706565	0	0	0.00058611
405	0.024188422	0.10212737	0	0	0.00069892
410	0.016384956	0.094698299	0	0.003060867	5.99833E-6
415	0.010019678	0.087363163	0	0.006788178	0
420	0.005421261	0.080514731	0	0.007966111	0
425	0.001413574	0.073154898	0	0.005768546	0
430	0	0.065174619	0	0.002216874	0
435	0	0.056733387	0	0	0.000134436
440	0	0.048612379	0	0	2.63948E-5
445	0	0.041972153	0	0	1.30401E-5
450	0	0.036817831	0	2.05E-5	9.1149E-6
455	0	0.032817713	0	0.000153024	0
460	0	0.029006838	0	0.000200591	0
465	0	0.025704941	0	0.000195814	0
470	0	0.023069038	0	0.000157844	2.77719E-5
475	0	0.02097958	0	0.000119224	6.23524E-5
480	0	0.018990594	0	8.70858E-5	7.06342E-5
485	0	0.017225221	0	1.35939E-5	9.3625E-5
490	0	0.015735631	0	0	7.09325E-5
495	0	0.014271625	0	0	3.2375E-5
500	0	0.01330732	0	0	3.9368E-6];

emmodel=[...
300	0	0	0.004955387	0	0.265485421
305	0	0	0.008645647	0.012617847	0.275135682
310	0	0	0.013420401	0.022437736	0.284302626
315	0	0	0.018052142	0.032130619	0.291516398
320	0	0	0.021934047	0.042036486	0.297935957
325	0	0	0.025973344	0.052315935	0.301827148
330	0	0	0.028642163	0.064816155	0.296860809
335	0	0	0.034514063	0.077684875	0.291361326
340	0	0	0.038399262	0.09483903	0.275972584
345	0	0	0.045478781	0.115916023	0.252793948
350	0	0	0.055088204	0.140851752	0.229859924
355	0	0	0.064305768	0.171166245	0.200169946
360	0	0	0.076240935	0.205228882	0.169687979
365	0	0	0.090688112	0.24087197	0.140024724
370	0	0.007028938	0.103364698	0.269535123	0.115382688
375	0.008400273	0.011480703	0.115079964	0.288385621	0.09726444
380	0.032824227	0.003828622	0.125802324	0.296865245	0.082173614
385	0.056622008	0	0.137736258	0.301593812	0.070501429
390	0.080143731	0	0.151431875	0.304101543	0.058709408
395	0.107216864	0	0.160503314	0.294726973	0.049888304
400	0.136299506	0	0.169123385	0.27894588	0.041931198
405	0.167647572	0	0.174859391	0.255213273	0.037592055
410	0.19857631	0	0.180535942	0.22643297	0.033431345
415	0.229303994	0	0.184583395	0.194121043	0.031394089
420	0.258537128	0	0.188064761	0.160321484	0.029954858
425	0.277592715	0.008314782	0.191069863	0.12850248	0.028901286
430	0.284426621	0.026625739	0.194420595	0.103056278	0.025691323
435	0.289521701	0.044663918	0.195119251	0.078192992	0.02640944
440	0.290374894	0.06536853	0.197335821	0.05614926	0.025427467
445	0.283720802	0.088319097	0.197662023	0.036716409	0.023890625
450	0.271731288	0.11303532	0.197739033	0.019986045	0.022623007
455	0.257360455	0.136248775	0.195942029	0.006979459	0.021675182
460	0.234843112	0.159523004	0.192823247	0	0.019711528
465	0.20975397	0.182120536	0.190750471	0	0.016574702
470	0.182971215	0.201494603	0.185940844	0	0.013943248
475	0.162271254	0.218217204	0.18310865	0	0.011795987
480	0.140249325	0.229858515	0.17831442	0	0.010298016
485	0.121967877	0.238346843	0.172575789	0	0.01017775
490	0.105283295	0.245547951	0.16782308	0	0.009400552
495	0.090114495	0.248292095	0.162193152	0	0.009604022
500	0.074976374	0.25065121	0.156807487	0	0.00903529
505	0.060329735	0.250729957	0.150928989	0.001903783	0.009387381
510	0.044794755	0.249182047	0.145746908	0.006097375	0.007790169
515	0.031744509	0.245760069	0.139739167	0.010293402	0.007439787
520	0.01997017	0.240359088	0.133798826	0.014184769	0.008227276
525	0.011329104	0.234258737	0.126051488	0.016223009	0.009047612
530	0.003353984	0.226860542	0.120472903	0.017621456	0.009081306
535	0	0.217691395	0.113047751	0.017217792	0.010421638
540	0	0.206672894	0.105021484	0.015423643	0.012816793
545	0	0.196107942	0.096050401	0.014136771	0.015718013
550	0	0.185304644	0.088136222	0.012596594	0.018277527];
Executing: Cex=exmodel(:,1); Cem=emmodel(:,1); % pull ex and em from the data
C=size(exmodel,2)-1;% the number of components
EXmodel=exmodel(:,2:C+1); EMmodel=emmodel(:,2:C+1);

txt=['save ',ID,'.mat C Cex Cem']; eval(txt)

% make a loop to make a matrix for each component
for i=1:1:C
    istr=num2str(i); 
    txt=['Cex',istr,'=EXmodel(:,i);']; eval(txt)
    txt=['save ',ID,'.mat Cex',istr,' -append']; eval(txt)
    txt=['Cem',istr,'=EMmodel(:,i);']; eval(txt)
    txt=['save ',ID,'.mat Cem',istr,' -append']; eval(txt)
    FEEM=EXmodel(:,i)*EMmodel(:,i)';
    subplot(3,3,i); contour(Cem,Cex,FEEM); hold on
    title(istr)
end
Device pixel ratio: 1
Render time: 796895
Encode time: 17771
Send time: 1493
Draw time: 831991
[I 17:33:33.229 NotebookApp] New terminal with automatic name: 1
[I 17:35:08.211 NotebookApp] Saving file at /Meilleur_HudsonBay.ipynb
[I 17:41:08.983 NotebookApp] Saving file at /data.m
[W 17:41:15.502 NotebookApp] Notebook generateFEEMplots.ipynb is not trusted
[I 17:41:15.799 NotebookApp] Kernel started: 1ea245fe-4f60-4c94-91cb-0e270245f880, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
Executing: % load the data. you have to restart kernel after every data change
run("data.m")
Executing: function [F,em,ex]=Fprocess(data,fraction,exmin,exmax,flag)

[N,M]=size(data); c=0; if flag==1; data(data==0)=NaN; end

for i=2:1:M
    c=c+1; MIN=min(data(2:N,i)); F(:,c)=data(2:N,i)-min(data(2:N,i));
end

F=F'; ex=data(1,2:M); em=data(2:N,1); [N,M]=size(F);



for i=1:N
    for j=1:M
        EM=em(j);
        EX=ex(i);
        if EM>=EX*(1-fraction)
            if EM<=EX*(1+fraction)
                F(i,j)=NaN;
            end
        end
    end
end
  
for i=1:N
    for j=1:M
        EM=em(j);
        EX=ex(i);
        if EM>=(2*EX)*(1-fraction)
            if EM<=(2*EX)*(1+fraction)
                F(i,j)=NaN;
            end
        end
    end
end

% now modify for ex max and min

c=0;
for k=1:length(ex);
    extst=ex(k);
    if extst>exmin
        if extst<exmax
        c=c+1;
        EXX(c)=extst;
        FX(c,:)=F(k,:);
        end
    end
end

F=FX; ex=EXX;

end
Executing: 
function [G,H,I]=resample(data,em,ex,samplefreq)

% try to resample so things look better

[N,M]=size(data); % M is em points N is ex points

for i=1:N
    Fem=data(i,:); c=0;
    for j=1:round(M/samplefreq):M
       c=c+1; Femred(c)=Fem(j); emred(c)=em(j);
    end
    datare(i,:)=Femred;
end

[N,M]=size(datare); % M is em points N is ex points.  sample into 10 steps.

for i=1:M
    Fex=datare(:,i); c=0;
    for j=1:round(N/samplefreq):N
       c=c+1;
       Fexred(c)=Fex(j); exred(c)=ex(j);
    end
    datarere(:,i)=Fexred;
end

G=datarere;
H=emred;
I=exred;

end
Executing: function makesurfaceplot(F,em,ex)
 colormap('jet'); shading interp
 h=surf(em,ex,F);
 set(gca,'linewidth',2)
 view([-26 48])
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))*1.1])
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 h=zlabel('Intensity (arb.)'); set(h,'fontsize',12)
end
Executing: function makemeshplot(F,em,ex)
 colormap('jet'); 
 h=mesh(em,ex,F);
 set(gca,'linewidth',2)
 view([-26 48])
 shading flat
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))*1.1])
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 h=zlabel('Intensity (arb.)'); set(h,'fontsize',12)
end
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: function makesimplecontourplot(F,em,ex,num)
 [C,h]=contour(em,ex,F,num,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex)])
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
end
Executing: %contour plot over colourmap.
scatterfactor=0.02; exmin=220; exmax=400; flag=1;
[F,em,ex]=Fprocess(data,scatterfactor,exmin,exmax,flag);
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 669843
Encode time: 16519
Send time: 796
Draw time: 704266
Executing: %black and white contour plot
% need to define the number of contour lines

num=3;

graphics_toolkit ("notebook"); 
makesimplecontourplot(F,em,ex,num)
Device pixel ratio: 1
Render time: 335426
Encode time: 14994
Send time: 696
Draw time: 366034
Executing: %plot of all the data in 3D
graphics_toolkit ("notebook"); 
makesurfaceplot(F,em,ex)
Device pixel ratio: 1
Render time: 448838
Encode time: 33254
Send time: 2217
Draw time: 503342
Executing: % resample the data to improve the appearance of the plot.  looks better if ex and
% em are sampled at similar resolution
% you need to set the samplefreq parameter
graphics_toolkit ("notebook"); 
samplefreq=20; %divide ex and em into samplereq equal steps.  so bigger number closer.
[Fr,emr,exr]=resample(F,em,ex,samplefreq); %
makesurfaceplot(Fr,emr,exr)
Device pixel ratio: 1
Render time: 430452
Encode time: 21503
Send time: 1409
Draw time: 467737
Executing: % resampled plot but with a wire mesh look
graphics_toolkit ("notebook"); 
makemeshplot(Fr,emr,exr)
Device pixel ratio: 1
Render time: 437199
Encode time: 19962
Send time: 1729
Draw time: 473282
Executing: % use the plotly plotting command to make the surface rotatable
graphics_toolkit ("plotly"); 
makesurfaceplot(F,em,ex)
list
string: 300
list
string: 400
list
string: 500
list
string: 600
list
string: 250
list
string: 300
list
string: 350
list
string: 0
list
string: 50
list
string: 100
list
string: 150
list
string: 200
list
string: Emission (nm)
list
string: Excitation (nm)
list
string: Excitation (nm)
Executing: % print the plots as files for download.  also download data as a mat file
% remove the comment below to generate the file for download

%save data.mat F em ex

%available_graphics_toolkits ()
%graphics_toolkit ("fltk"); 

%%% remove the comment (%) from the two commands below
%makemeshplot(Fr,emr,exr)
%print fig.png -dpng
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%55


Executing: save data.mat F em ex Fr emr exr
Executing: % load the data. you have to restart kernel after every data change
run("data.m")
Executing: function [F,em,ex]=Fprocess(data,fraction,exmin,exmax,flag)

[N,M]=size(data); c=0; if flag==1; data(data==0)=NaN; end

for i=2:1:M
    c=c+1; MIN=min(data(2:N,i)); F(:,c)=data(2:N,i)-min(data(2:N,i));
end

F=F'; ex=data(1,2:M); em=data(2:N,1); [N,M]=size(F);



for i=1:N
    for j=1:M
        EM=em(j);
        EX=ex(i);
        if EM>=EX*(1-fraction)
            if EM<=EX*(1+fraction)
                F(i,j)=NaN;
            end
        end
    end
end
  
for i=1:N
    for j=1:M
        EM=em(j);
        EX=ex(i);
        if EM>=(2*EX)*(1-fraction)
            if EM<=(2*EX)*(1+fraction)
                F(i,j)=NaN;
            end
        end
    end
end

% now modify for ex max and min

c=0;
for k=1:length(ex);
    extst=ex(k);
    if extst>exmin
        if extst<exmax
        c=c+1;
        EXX(c)=extst;
        FX(c,:)=F(k,:);
        end
    end
end

F=FX; ex=EXX;

end
Executing: 
function [G,H,I]=resample(data,em,ex,samplefreq)

% try to resample so things look better

[N,M]=size(data); % M is em points N is ex points

for i=1:N
    Fem=data(i,:); c=0;
    for j=1:round(M/samplefreq):M
       c=c+1; Femred(c)=Fem(j); emred(c)=em(j);
    end
    datare(i,:)=Femred;
end

[N,M]=size(datare); % M is em points N is ex points.  sample into 10 steps.

for i=1:M
    Fex=datare(:,i); c=0;
    for j=1:round(N/samplefreq):N
       c=c+1;
       Fexred(c)=Fex(j); exred(c)=ex(j);
    end
    datarere(:,i)=Fexred;
end

G=datarere;
H=emred;
I=exred;

end
Executing: function makesurfaceplot(F,em,ex)
 colormap('jet'); shading interp
 h=surf(em,ex,F);
 set(gca,'linewidth',2)
 view([-26 48])
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))*1.1])
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 h=zlabel('Intensity (arb.)'); set(h,'fontsize',12)
end
Executing: function makemeshplot(F,em,ex)
 colormap('jet'); 
 h=mesh(em,ex,F);
 set(gca,'linewidth',2)
 view([-26 48])
 shading flat
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))*1.1])
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 h=zlabel('Intensity (arb.)'); set(h,'fontsize',12)
end
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: function makesimplecontourplot(F,em,ex,num)
 [C,h]=contour(em,ex,F,num,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex)])
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
end
Executing: %contour plot over colourmap.
scatterfactor=0.02; exmin=250; exmax=500; flag=1;
[F,em,ex]=Fprocess(data,scatterfactor,exmin,exmax,flag);
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 696718
Encode time: 28615
Send time: 1939
Draw time: 747630
Executing: %black and white contour plot
% need to define the number of contour lines

num=3;

graphics_toolkit ("notebook"); 
makesimplecontourplot(F,em,ex,num)
Device pixel ratio: 1
Render time: 331797
Encode time: 16308
Send time: 1087
Draw time: 363638
Executing: %plot of all the data in 3D
graphics_toolkit ("notebook"); 
makesurfaceplot(F,em,ex)
Device pixel ratio: 1
Render time: 454320
Encode time: 24992
Send time: 1863
Draw time: 499935
Executing: % resample the data to improve the appearance of the plot.  looks better if ex and
% em are sampled at similar resolution
% you need to set the samplefreq parameter
graphics_toolkit ("notebook"); 
samplefreq=20; %divide ex and em into samplereq equal steps.  so bigger number closer.
[Fr,emr,exr]=resample(F,em,ex,samplefreq); %
makesurfaceplot(Fr,emr,exr)
Device pixel ratio: 1
Render time: 431174
Encode time: 20566
Send time: 1279
Draw time: 467116
Executing: % resampled plot but with a wire mesh look
graphics_toolkit ("notebook"); 
makemeshplot(Fr,emr,exr)
Device pixel ratio: 1
Render time: 431681
Encode time: 19605
Send time: 1721
Draw time: 472737
Executing: % use the plotly plotting command to make the surface rotatable
graphics_toolkit ("plotly"); 
makesurfaceplot(F,em,ex)
list
string: 300
list
string: 400
list
string: 500
list
string: 600
list
string: 300
list
string: 350
list
string: 400
list
string: 450
list
string: 0
list
string: 0.05
list
string: 0.1
list
string: 0.15
list
string: 0.2
list
string: 0.25
list
string: Emission (nm)
list
string: Excitation (nm)
list
string: Excitation (nm)
Executing: % print the plots as files for download.  also download data as a mat file
% remove the comment below to generate the file for download

%save data.mat F em ex

%available_graphics_toolkits ()
%graphics_toolkit ("fltk"); 

%%% remove the comment (%) from the two commands below
%makemeshplot(Fr,emr,exr)
%print fig.png -dpng
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%55


Executing: save data.mat F em ex Fr emr exr
[W 17:42:04.035 NotebookApp] Notebook fitFEEMtocomponents.ipynb is not trusted
[I 17:42:04.266 NotebookApp] Kernel started: d082a005-9d84-4132-a4f8-a7f38e4ec1b1, name: xoctave
OpenGL vendor: VMware, Inc.
OpenGL renderer: llvmpipe (LLVM 10.0.0, 128 bits)
OpenGL version: 3.1 Mesa 20.0.8
Run with XEUS 3.0.5
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 665326
Encode time: 28429
Send time: 1600
Draw time: 712423
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 538961
Encode time: 17355
Send time: 953
Draw time: 583162
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

% brute force just write diff equation each different number of C (components)
if C==1;
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1).^2)));
    p0=[-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1);
    Ffit=fitfcn(p);
end
if C==2
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2).^2)));
    p0=[-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2);
    Ffit=fitfcn(p);
end
if C==3
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3).^2)));
    p0=[-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3);
    Ffit=fitfcn(p);
end
if C==4
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4).^2)));
    p0=[-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4);
    Ffit=fitfcn(p);
end
if C==5
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4+10^p(5).*F5).^2)));
    p0=[-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
end

if C==6
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4+10^p(5).*F5+10^p(6).*F6).^2)));
    p0=[-6;-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5+p(6).*F6);
    Ffit=fitfcn(p);
end

if C==7
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4+10^p(5).*F5+10^p(6).*F6+10^p(7).*F7).^2)));
    p0=[-6;-6;-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5+p(6).*F6+p(7).*F7);
    Ffit=fitfcn(p);
end

if C==8
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4+10^p(5).*F5+10^p(6).*F6+10^p(7).*F7+10^p(8).*F8).^2)));
    p0=[-6;-6;-6;-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5+p(6).*F6+p(7).*F7+p(8).*F8);
    Ffit=fitfcn(p);
end
Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 612818
Encode time: 17200
Send time: 1355
Draw time: 658058
[I 17:43:15.704 NotebookApp] Saving file at /generateFEEMplots.ipynb
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 668200
Encode time: 28704
Send time: 1989
Draw time: 716148
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 549236
Encode time: 15316
Send time: 941
Draw time: 583929
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

% brute force just write diff equation each different number of C (components)
if C==1;
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1).^2)));
    p0=[-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1);
    Ffit=fitfcn(p);
end
if C==2
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2).^2)));
    p0=[-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2);
    Ffit=fitfcn(p);
end
if C==3
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3).^2)));
    p0=[-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3);
    Ffit=fitfcn(p);
end
if C==4
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4).^2)));
    p0=[-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4);
    Ffit=fitfcn(p);
end
if C==5
    fcn=@(p)(sum(sum((FnoNaN-(10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)_.*F4+(10^p(5)).*F5).^2)));
    p0=[-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
end

if C==6
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4+10^p(5).*F5+10^p(6).*F6).^2)));
    p0=[-6;-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5+p(6).*F6);
    Ffit=fitfcn(p);
end

if C==7
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4+10^p(5).*F5+10^p(6).*F6+10^p(7).*F7).^2)));
    p0=[-6;-6;-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5+p(6).*F6+p(7).*F7);
    Ffit=fitfcn(p);
end

if C==8
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4+10^p(5).*F5+10^p(6).*F6+10^p(7).*F7+10^p(8).*F8).^2)));
    p0=[-6;-6;-6;-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5+p(6).*F6+p(7).*F7+p(8).*F8);
    Ffit=fitfcn(p);
end
[I 17:44:04.147 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
[I 17:44:24.025 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 665908
Encode time: 28632
Send time: 1797
Draw time: 711905
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 540996
Encode time: 15826
Send time: 910
Draw time: 572877
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

% brute force just write diff equation each different number of C (components)
if C==1;
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1).^2)));
    p0=[-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1);
    Ffit=fitfcn(p);
end
if C==2
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2).^2)));
    p0=[-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2);
    Ffit=fitfcn(p);
end
if C==3
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3).^2)));
    p0=[-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3);
    Ffit=fitfcn(p);
end
if C==4
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4).^2)));
    p0=[-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4);
    Ffit=fitfcn(p);
end
if C==5
    fcn=@(p)(sum(sum((FnoNaN-(10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5).^2)));
    p0=[-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
end

if C==6
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4+10^p(5).*F5+10^p(6).*F6).^2)));
    p0=[-6;-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5+p(6).*F6);
    Ffit=fitfcn(p);
end

if C==7
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4+10^p(5).*F5+10^p(6).*F6+10^p(7).*F7).^2)));
    p0=[-6;-6;-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5+p(6).*F6+p(7).*F7);
    Ffit=fitfcn(p);
end

if C==8
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4+10^p(5).*F5+10^p(6).*F6+10^p(7).*F7+10^p(8).*F8).^2)));
    p0=[-6;-6;-6;-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5+p(6).*F6+p(7).*F7+p(8).*F8);
    Ffit=fitfcn(p);
end
Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 614858
Encode time: 17178
Send time: 1370
Draw time: 648717
[I 17:45:08.275 NotebookApp] Saving file at /Meilleur_HudsonBay.ipynb
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 664518
Encode time: 28192
Send time: 1811
Draw time: 710221
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 539533
Encode time: 16303
Send time: 985
Draw time: 571480
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

% brute force just write diff equation each different number of C (components)
if C==1;
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1).^2)));
    p0=[-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1);
    Ffit=fitfcn(p);
end
if C==2
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2).^2)));
    p0=[-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2);
    Ffit=fitfcn(p);
end
if C==3
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3).^2)));
    p0=[-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3);
    Ffit=fitfcn(p);
end
if C==4
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4).^2)));
    p0=[-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4);
    Ffit=fitfcn(p);
end
if C==5
    fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
    p0=[-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
end

if C==6
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4+10^p(5).*F5+10^p(6).*F6).^2)));
    p0=[-6;-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5+p(6).*F6);
    Ffit=fitfcn(p);
end

if C==7
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4+10^p(5).*F5+10^p(6).*F6+10^p(7).*F7).^2)));
    p0=[-6;-6;-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5+p(6).*F6+p(7).*F7);
    Ffit=fitfcn(p);
end

if C==8
    fcn=@(p)(sum(sum((FnoNaN-10^p(1).*F1+10^p(2).*F2+10^p(3).*F3+10^p(4).*F4+10^p(5).*F5+10^p(6).*F6+10^p(7).*F7+10^p(8).*F8).^2)));
    p0=[-6;-6;-6;-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5+p(6).*F6+p(7).*F7+p(8).*F8);
    Ffit=fitfcn(p);
end
Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 617044
Encode time: 17767
Send time: 1386
Draw time: 669890
[I 17:46:24.070 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
[I 17:48:24.116 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 684218
Encode time: 28439
Send time: 1639
Draw time: 729832
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 539713
Encode time: 15909
Send time: 892
Draw time: 570629
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

    fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
    p0=[-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    relativeerror=fval./(sum(sum(FnoNaN.^2)))
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);

Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 611713
Encode time: 16956
Send time: 1397
Draw time: 645031
[I 17:50:24.156 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 659801
Encode time: 29153
Send time: 1647
Draw time: 709015
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 538188
Encode time: 15991
Send time: 918
Draw time: 569239
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

    fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
    p0=[-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
    residuals=sum(sum((F-Ffit)./F))

Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 615204
Encode time: 16683
Send time: 1482
Draw time: 648661
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 668694
Encode time: 28794
Send time: 1638
Draw time: 715515
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 542189
Encode time: 16130
Send time: 1011
Draw time: 574704
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

    fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
    p0=[-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
    residuals=sum(sum((FnoNaN-Ffit)./F))

Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 616224
Encode time: 17921
Send time: 1490
Draw time: 652245
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 660326
Encode time: 29326
Send time: 1620
Draw time: 706841
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 538218
Encode time: 15904
Send time: 894
Draw time: 569067
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

    fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
    p0=[-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
    residuals=sum(sum((FnoNaN-Ffit)./FnoNaN))

Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 617139
Encode time: 17266
Send time: 1405
Draw time: 651207
[I 17:52:11.932 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

    fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
    p0=[-6;-6;-6;-6;-6]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
    sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)

Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

    fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
    p0=[1;1;1;1;1]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
    sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)

[I 17:54:11.981 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

    fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
    p0=[2;2;2;2;2]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
    sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)

[I 17:56:12.020 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

    fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
    p0=[2;2;2;2;2]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
    sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
    runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    txt=[runningtxt,'(10^p('istr',')).*F',istr,'+']
end

[I 17:58:12.061 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

    fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
    p0=[2;2;2;2;2]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
    sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
    runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    txt=[runningtxt,'(10^p(',istr,')).*F',istr,'+']
end

Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

    fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
    p0=[2;2;2;2;2]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
    sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
    runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+']
end

Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

    fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
    p0=[2;2;2;2;2]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
    sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
    runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+']
end

Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

    fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
    p0=[2;2;2;2;2]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
    sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
    runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+']
end
runningtxt=runningtext(1:length(runningtext)-1)
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

    fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
    p0=[2;2;2;2;2]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
    sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
    runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+']
end
runningtxt=runningtxt(1:length(runningtxt)-1)
[I 18:00:12.103 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

    fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
    p0=[2;2;2;2;2]; 
    [pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
    sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
    runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+']
end
runningtxt=runningtxt(1:length(runningtxt)-1);
txt=[runningtxt,')).^2)));']
[I 18:02:12.151 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 674410
Encode time: 28372
Send time: 1873
Draw time: 720789
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 539139
Encode time: 15766
Send time: 982
Draw time: 577608
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=2;
end
runningtxt=runningtxt(1:length(runningtxt)-1);
txt=[runningtxt,')).^2)));']

[pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
    sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 616971
Encode time: 17204
Send time: 1360
Draw time: 658253
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 663834
Encode time: 28349
Send time: 6390
Draw time: 714789
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 553721
Encode time: 16645
Send time: 914
Draw time: 592485
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=2;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);

[pmin,fval]=fminsearch(fcn,p0); p=10.^pmin
    fitfcn=@(p)(p(1).*F1+p(2).*F2+p(3).*F3+p(4).*F4+p(5).*F5);
    Ffit=fitfcn(p);
    sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 625831
Encode time: 17234
Send time: 1324
Draw time: 659376
[I 18:04:12.196 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 666126
Encode time: 30951
Send time: 1562
Draw time: 720093
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 537691
Encode time: 16754
Send time: 895
Draw time: 572925
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=2;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
[pmin,fval]=fminsearch(fcn,p0); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 617520
Encode time: 17343
Send time: 1309
Draw time: 652108
[I 18:06:12.237 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 682894
Encode time: 28672
Send time: 1599
Draw time: 730302
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 545467
Encode time: 15949
Send time: 934
Draw time: 581036
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=3;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
[pmin,fval]=fminsearch(fcn,p0); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 615344
Encode time: 16719
Send time: 1343
Draw time: 649517
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 666645
Encode time: 28967
Send time: 1703
Draw time: 712709
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 546870
Encode time: 16701
Send time: 891
Draw time: 578573
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=4;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
[pmin,fval]=fminsearch(fcn,p0); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 623345
Encode time: 18770
Send time: 1401
Draw time: 659050
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 658751
Encode time: 28842
Send time: 1698
Draw time: 705932
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 539168
Encode time: 16183
Send time: 1169
Draw time: 571051
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=2.5;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
[pmin,fval]=fminsearch(fcn,p0); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 616126
Encode time: 17183
Send time: 1618
Draw time: 650214
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 695410
Encode time: 29537
Send time: 1880
Draw time: 743448
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 542765
Encode time: 16136
Send time: 930
Draw time: 574583
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=3.5;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
[pmin,fval]=fminsearch(fcn,p0); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 619899
Encode time: 17919
Send time: 11125
Draw time: 679553
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 663019
Encode time: 28285
Send time: 1804
Draw time: 709193
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 538072
Encode time: 16186
Send time: 981
Draw time: 569552
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=3;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
[pmin,fval]=fminsearch(fcn,p0); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 613476
Encode time: 25436
Send time: 1343
Draw time: 662969
[I 18:08:12.297 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=3;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
optval=optimget(options,fminmsearch)
[pmin,fval]=fminsearch(fcn,p0); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=3;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
optval=optimget(options,fminsearch)
[pmin,fval]=fminsearch(fcn,p0); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
[I 18:14:12.377 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=3;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset()
[pmin,fval]=fminsearch(fcn,p0); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=3;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',100)
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=3;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',200);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=3;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',300);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=3;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',1000);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=3;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',10000);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
[I 18:16:12.443 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=2;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',10000);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=1;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',10000);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=4;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',10000);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=3;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',10000);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=2;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',10000);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=1;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',10000);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=1;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',10000,'display','on');
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=1;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',10000,'display','iter');
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
[I 18:18:12.512 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 673437
Encode time: 29338
Send time: 1602
Draw time: 720883
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 543447
Encode time: 16528
Send time: 1026
Draw time: 585683
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=1;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',10000,'display','off','TolFun',1e-5,'TolX',1e-5);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 622245
Encode time: 17576
Send time: 1318
Draw time: 656968
Executing: % load the data. you have to restart kernel after every data change
load data.mat
Executing: function makecontourplot(F,em,ex)
 colormap('jet')
 h=surf(em,ex,F);
 shading interp
 hold on; [C,h]=contour3(em,ex,F,3,'k'); set(h,'linewidth',2); 
 set(gca,'linewidth',2,'fontsize',12)
 axis([min(em) max(em) min(ex) max(ex) 0 max(max(F))])
 view([0 90])
 hold on; plot3([250 600],[450 450],[0 0],'k','linewidth',2)
 hold on; plot3([600 600],[220 450],[0 0],'k','linewidth',2)
 h=xlabel('Emission (nm)'); set(h,'fontsize',12)
 h=ylabel('Excitation (nm)');  set(h,'fontsize',12)
 %add scale bar
 colorbar 
end
Executing: %contour plot over colourmap.
graphics_toolkit ("notebook"); 
makecontourplot(F,em,ex)
Device pixel ratio: 1
Render time: 662968
Encode time: 29461
Send time: 1811
Draw time: 710418
Executing: % load the model

load ID15154.mat %ex 250-500 em 300-350

% interpolate over this em and ex for the dataset

for i=1:C
    istr=num2str(i);
    txt=['Cem',istr','i=interp1(Cem,Cem',istr,',em); Cem',istr,'i(isnan(Cem',istr,'i))=0;'];
    eval(txt)
    txt=['Cex',istr','i=interp1(Cex,Cex',istr,',ex); Cex',istr,'i(isnan(Cex',istr,'i))=0;'];
    eval(txt)
    %Cex1i=interp1(Cex,Cex1,ex); Cex1i(isnan(Cex1i))=0; 
    %size(Cex1i)
    %size(Cem1i)
    txt=['F',istr,'=Cex',istr,'i''*Cem',istr,'i'';']; eval(txt);
    subplot(3,3,i); hold on;
    txt=['contour(em,ex,F',istr,')']; eval(txt)
    title(istr)
end
    
Device pixel ratio: 1
Render time: 536807
Encode time: 15871
Send time: 909
Draw time: 568970
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=1;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',10000,'display','iter','TolFun',1e-5,'TolX',1e-5);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: subplot(221)
contour(em,ex,F)
subplot(222)
contour(em,ex,Ffit)
subplot(223)
contour(em,ex,F-Ffit)
Device pixel ratio: 1
Render time: 737367
Encode time: 21578
Send time: 1544
Draw time: 779400
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=2;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',10000,'display','off','TolFun',1e-5,'TolX',1e-5);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=3;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',10000,'display','off','TolFun',1e-5,'TolX',1e-5);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=0.5;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',10000,'display','off','TolFun',1e-5,'TolX',1e-5);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
Executing: % fit to a linear model
FnoNaN=F; FnoNaN(isnan(FnoNaN))=0; % get rid of NaN in the original matrix

%fcn=@(p)(sum(sum((FnoNaN-((10^p(1)).*F1+(10^p(2)).*F2+(10^p(3)).*F3+(10^p(4)).*F4+(10^p(5)).*F5)).^2)));
%p0=[2;2;2;2;2]; 
    
runningtxt=['fcn=@(p)(sum(sum((FnoNaN-('];
for i=1:C
    istr=num2str(i);
    runningtxt=[runningtxt,'(10^p(',istr,')).*F',istr,'+'];
    p0(i)=1;
end
runningtxt=runningtxt(1:length(runningtxt)-1); txt=[runningtxt,')).^2)));']; eval(txt);
options=optimset('MaxFunEvals',10000,'display','off','TolFun',1e-5,'TolX',1e-5);
[pmin,fval]=fminsearch(fcn,p0,options); p=10.^pmin

Ffit=zeros(size(F));
for i=1:C
    istr=num2str(i);
    txt=['Ffit=Ffit+p(i)*F',istr,';']; eval(txt);
end
sumF=sum(sum(FnoNaN)); sumFfit=sum(sum(Ffit)); overallfit=100*((sumF-sumFfit)./sumF)
    
[I 18:20:10.373 NotebookApp] Saving file at /fitFEEMtocomponents.ipynb
